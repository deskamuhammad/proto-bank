// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/sales_document.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesDocumentServiceClient is the client API for SalesDocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesDocumentServiceClient interface {
	GetInvoiceDocument(ctx context.Context, in *GetInvoiceDocumentRequest, opts ...grpc.CallOption) (*GetInvoiceDocumentResponse, error)
	GetSupportingDocument(ctx context.Context, in *GetSupportingDocumentRequest, opts ...grpc.CallOption) (*GetSupportingDocumentResponse, error)
	CreateInvoiceDocument(ctx context.Context, in *CreateInvoiceDocumentRequest, opts ...grpc.CallOption) (*CreateInvoiceDocumentResponse, error)
	CreateSupportingDocument(ctx context.Context, in *CreateSupportingDocumentRequest, opts ...grpc.CallOption) (*CreateSupportingDocumentResponse, error)
	UpdateInvoiceDocument(ctx context.Context, in *UpdateInvoiceDocumentRequest, opts ...grpc.CallOption) (*UpdateInvoiceDocumentResponse, error)
	UpdateSupportingDocument(ctx context.Context, in *UpdateSupportingDocumentRequest, opts ...grpc.CallOption) (*UpdateSupportingDocumentResponse, error)
}

type salesDocumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesDocumentServiceClient(cc grpc.ClientConnInterface) SalesDocumentServiceClient {
	return &salesDocumentServiceClient{cc}
}

func (c *salesDocumentServiceClient) GetInvoiceDocument(ctx context.Context, in *GetInvoiceDocumentRequest, opts ...grpc.CallOption) (*GetInvoiceDocumentResponse, error) {
	out := new(GetInvoiceDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/GetInvoiceDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesDocumentServiceClient) GetSupportingDocument(ctx context.Context, in *GetSupportingDocumentRequest, opts ...grpc.CallOption) (*GetSupportingDocumentResponse, error) {
	out := new(GetSupportingDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/GetSupportingDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesDocumentServiceClient) CreateInvoiceDocument(ctx context.Context, in *CreateInvoiceDocumentRequest, opts ...grpc.CallOption) (*CreateInvoiceDocumentResponse, error) {
	out := new(CreateInvoiceDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/CreateInvoiceDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesDocumentServiceClient) CreateSupportingDocument(ctx context.Context, in *CreateSupportingDocumentRequest, opts ...grpc.CallOption) (*CreateSupportingDocumentResponse, error) {
	out := new(CreateSupportingDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/CreateSupportingDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesDocumentServiceClient) UpdateInvoiceDocument(ctx context.Context, in *UpdateInvoiceDocumentRequest, opts ...grpc.CallOption) (*UpdateInvoiceDocumentResponse, error) {
	out := new(UpdateInvoiceDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/UpdateInvoiceDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesDocumentServiceClient) UpdateSupportingDocument(ctx context.Context, in *UpdateSupportingDocumentRequest, opts ...grpc.CallOption) (*UpdateSupportingDocumentResponse, error) {
	out := new(UpdateSupportingDocumentResponse)
	err := c.cc.Invoke(ctx, "/SalesDocumentService/UpdateSupportingDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesDocumentServiceServer is the server API for SalesDocumentService service.
// All implementations must embed UnimplementedSalesDocumentServiceServer
// for forward compatibility
type SalesDocumentServiceServer interface {
	GetInvoiceDocument(context.Context, *GetInvoiceDocumentRequest) (*GetInvoiceDocumentResponse, error)
	GetSupportingDocument(context.Context, *GetSupportingDocumentRequest) (*GetSupportingDocumentResponse, error)
	CreateInvoiceDocument(context.Context, *CreateInvoiceDocumentRequest) (*CreateInvoiceDocumentResponse, error)
	CreateSupportingDocument(context.Context, *CreateSupportingDocumentRequest) (*CreateSupportingDocumentResponse, error)
	UpdateInvoiceDocument(context.Context, *UpdateInvoiceDocumentRequest) (*UpdateInvoiceDocumentResponse, error)
	UpdateSupportingDocument(context.Context, *UpdateSupportingDocumentRequest) (*UpdateSupportingDocumentResponse, error)
	mustEmbedUnimplementedSalesDocumentServiceServer()
}

// UnimplementedSalesDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesDocumentServiceServer struct {
}

func (UnimplementedSalesDocumentServiceServer) GetInvoiceDocument(context.Context, *GetInvoiceDocumentRequest) (*GetInvoiceDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) GetSupportingDocument(context.Context, *GetSupportingDocumentRequest) (*GetSupportingDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportingDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) CreateInvoiceDocument(context.Context, *CreateInvoiceDocumentRequest) (*CreateInvoiceDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) CreateSupportingDocument(context.Context, *CreateSupportingDocumentRequest) (*CreateSupportingDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportingDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) UpdateInvoiceDocument(context.Context, *UpdateInvoiceDocumentRequest) (*UpdateInvoiceDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) UpdateSupportingDocument(context.Context, *UpdateSupportingDocumentRequest) (*UpdateSupportingDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupportingDocument not implemented")
}
func (UnimplementedSalesDocumentServiceServer) mustEmbedUnimplementedSalesDocumentServiceServer() {}

// UnsafeSalesDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesDocumentServiceServer will
// result in compilation errors.
type UnsafeSalesDocumentServiceServer interface {
	mustEmbedUnimplementedSalesDocumentServiceServer()
}

func RegisterSalesDocumentServiceServer(s grpc.ServiceRegistrar, srv SalesDocumentServiceServer) {
	s.RegisterService(&SalesDocumentService_ServiceDesc, srv)
}

func _SalesDocumentService_GetInvoiceDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).GetInvoiceDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/GetInvoiceDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).GetInvoiceDocument(ctx, req.(*GetInvoiceDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesDocumentService_GetSupportingDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportingDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).GetSupportingDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/GetSupportingDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).GetSupportingDocument(ctx, req.(*GetSupportingDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesDocumentService_CreateInvoiceDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).CreateInvoiceDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/CreateInvoiceDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).CreateInvoiceDocument(ctx, req.(*CreateInvoiceDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesDocumentService_CreateSupportingDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupportingDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).CreateSupportingDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/CreateSupportingDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).CreateSupportingDocument(ctx, req.(*CreateSupportingDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesDocumentService_UpdateInvoiceDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).UpdateInvoiceDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/UpdateInvoiceDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).UpdateInvoiceDocument(ctx, req.(*UpdateInvoiceDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesDocumentService_UpdateSupportingDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupportingDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesDocumentServiceServer).UpdateSupportingDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SalesDocumentService/UpdateSupportingDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesDocumentServiceServer).UpdateSupportingDocument(ctx, req.(*UpdateSupportingDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalesDocumentService_ServiceDesc is the grpc.ServiceDesc for SalesDocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesDocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SalesDocumentService",
	HandlerType: (*SalesDocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvoiceDocument",
			Handler:    _SalesDocumentService_GetInvoiceDocument_Handler,
		},
		{
			MethodName: "GetSupportingDocument",
			Handler:    _SalesDocumentService_GetSupportingDocument_Handler,
		},
		{
			MethodName: "CreateInvoiceDocument",
			Handler:    _SalesDocumentService_CreateInvoiceDocument_Handler,
		},
		{
			MethodName: "CreateSupportingDocument",
			Handler:    _SalesDocumentService_CreateSupportingDocument_Handler,
		},
		{
			MethodName: "UpdateInvoiceDocument",
			Handler:    _SalesDocumentService_UpdateInvoiceDocument_Handler,
		},
		{
			MethodName: "UpdateSupportingDocument",
			Handler:    _SalesDocumentService_UpdateSupportingDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sales_document.proto",
}
