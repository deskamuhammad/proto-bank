// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/notification/proto/device_token.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceTokenServiceClient is the client API for DeviceTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTokenServiceClient interface {
	CreateDeviceToken(ctx context.Context, in *CreateDeviceTokenRequest, opts ...grpc.CallOption) (*BaseResponseV2, error)
}

type deviceTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTokenServiceClient(cc grpc.ClientConnInterface) DeviceTokenServiceClient {
	return &deviceTokenServiceClient{cc}
}

func (c *deviceTokenServiceClient) CreateDeviceToken(ctx context.Context, in *CreateDeviceTokenRequest, opts ...grpc.CallOption) (*BaseResponseV2, error) {
	out := new(BaseResponseV2)
	err := c.cc.Invoke(ctx, "/device_token.DeviceTokenService/CreateDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTokenServiceServer is the server API for DeviceTokenService service.
// All implementations must embed UnimplementedDeviceTokenServiceServer
// for forward compatibility
type DeviceTokenServiceServer interface {
	CreateDeviceToken(context.Context, *CreateDeviceTokenRequest) (*BaseResponseV2, error)
	mustEmbedUnimplementedDeviceTokenServiceServer()
}

// UnimplementedDeviceTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTokenServiceServer struct {
}

func (UnimplementedDeviceTokenServiceServer) CreateDeviceToken(context.Context, *CreateDeviceTokenRequest) (*BaseResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceToken not implemented")
}
func (UnimplementedDeviceTokenServiceServer) mustEmbedUnimplementedDeviceTokenServiceServer() {}

// UnsafeDeviceTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTokenServiceServer will
// result in compilation errors.
type UnsafeDeviceTokenServiceServer interface {
	mustEmbedUnimplementedDeviceTokenServiceServer()
}

func RegisterDeviceTokenServiceServer(s grpc.ServiceRegistrar, srv DeviceTokenServiceServer) {
	s.RegisterService(&DeviceTokenService_ServiceDesc, srv)
}

func _DeviceTokenService_CreateDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTokenServiceServer).CreateDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_token.DeviceTokenService/CreateDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTokenServiceServer).CreateDeviceToken(ctx, req.(*CreateDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceTokenService_ServiceDesc is the grpc.ServiceDesc for DeviceTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_token.DeviceTokenService",
	HandlerType: (*DeviceTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceToken",
			Handler:    _DeviceTokenService_CreateDeviceToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notification/proto/device_token.proto",
}
