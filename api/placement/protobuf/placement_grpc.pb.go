// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/placement.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlacementClient is the client API for Placement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlacementClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	OtpRequest(ctx context.Context, in *Otp, opts ...grpc.CallOption) (*OtpResponse, error)
	OtpValidate(ctx context.Context, in *OtpValidateRequest, opts ...grpc.CallOption) (*OtpValidateResponse, error)
	OtpResend(ctx context.Context, in *OtpResendRequest, opts ...grpc.CallOption) (*OtpResendResponse, error)
	GetPosition(ctx context.Context, in *DetailSignAndMateraiRequest, opts ...grpc.CallOption) (*SignAndMateraiPositions, error)
}

type placementClient struct {
	cc grpc.ClientConnInterface
}

func NewPlacementClient(cc grpc.ClientConnInterface) PlacementClient {
	return &placementClient{cc}
}

func (c *placementClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/Placement/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placementClient) OtpRequest(ctx context.Context, in *Otp, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/Placement/OtpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placementClient) OtpValidate(ctx context.Context, in *OtpValidateRequest, opts ...grpc.CallOption) (*OtpValidateResponse, error) {
	out := new(OtpValidateResponse)
	err := c.cc.Invoke(ctx, "/Placement/OtpValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placementClient) OtpResend(ctx context.Context, in *OtpResendRequest, opts ...grpc.CallOption) (*OtpResendResponse, error) {
	out := new(OtpResendResponse)
	err := c.cc.Invoke(ctx, "/Placement/OtpResend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placementClient) GetPosition(ctx context.Context, in *DetailSignAndMateraiRequest, opts ...grpc.CallOption) (*SignAndMateraiPositions, error) {
	out := new(SignAndMateraiPositions)
	err := c.cc.Invoke(ctx, "/Placement/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlacementServer is the server API for Placement service.
// All implementations must embed UnimplementedPlacementServer
// for forward compatibility
type PlacementServer interface {
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	OtpRequest(context.Context, *Otp) (*OtpResponse, error)
	OtpValidate(context.Context, *OtpValidateRequest) (*OtpValidateResponse, error)
	OtpResend(context.Context, *OtpResendRequest) (*OtpResendResponse, error)
	GetPosition(context.Context, *DetailSignAndMateraiRequest) (*SignAndMateraiPositions, error)
	mustEmbedUnimplementedPlacementServer()
}

// UnimplementedPlacementServer must be embedded to have forward compatible implementations.
type UnimplementedPlacementServer struct {
}

func (UnimplementedPlacementServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedPlacementServer) OtpRequest(context.Context, *Otp) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpRequest not implemented")
}
func (UnimplementedPlacementServer) OtpValidate(context.Context, *OtpValidateRequest) (*OtpValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpValidate not implemented")
}
func (UnimplementedPlacementServer) OtpResend(context.Context, *OtpResendRequest) (*OtpResendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpResend not implemented")
}
func (UnimplementedPlacementServer) GetPosition(context.Context, *DetailSignAndMateraiRequest) (*SignAndMateraiPositions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedPlacementServer) mustEmbedUnimplementedPlacementServer() {}

// UnsafePlacementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlacementServer will
// result in compilation errors.
type UnsafePlacementServer interface {
	mustEmbedUnimplementedPlacementServer()
}

func RegisterPlacementServer(s grpc.ServiceRegistrar, srv PlacementServer) {
	s.RegisterService(&Placement_ServiceDesc, srv)
}

func _Placement_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Placement/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Placement_OtpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Otp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).OtpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Placement/OtpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).OtpRequest(ctx, req.(*Otp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Placement_OtpValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).OtpValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Placement/OtpValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).OtpValidate(ctx, req.(*OtpValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Placement_OtpResend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpResendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).OtpResend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Placement/OtpResend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).OtpResend(ctx, req.(*OtpResendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Placement_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailSignAndMateraiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacementServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Placement/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacementServer).GetPosition(ctx, req.(*DetailSignAndMateraiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Placement_ServiceDesc is the grpc.ServiceDesc for Placement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Placement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Placement",
	HandlerType: (*PlacementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Placement_Sign_Handler,
		},
		{
			MethodName: "OtpRequest",
			Handler:    _Placement_OtpRequest_Handler,
		},
		{
			MethodName: "OtpValidate",
			Handler:    _Placement_OtpValidate_Handler,
		},
		{
			MethodName: "OtpResend",
			Handler:    _Placement_OtpResend_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _Placement_GetPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/placement.proto",
}
