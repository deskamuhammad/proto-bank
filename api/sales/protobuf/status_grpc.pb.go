// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/sales/proto/status.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServiceClient interface {
	ServiceCreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*ResultStatusResponse, error)
	ServiceFindStatusById(ctx context.Context, in *FindStatusByIdRequest, opts ...grpc.CallOption) (*ResultStatusResponse, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) ServiceCreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*ResultStatusResponse, error) {
	out := new(ResultStatusResponse)
	err := c.cc.Invoke(ctx, "/status.AuthorService/ServiceCreateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) ServiceFindStatusById(ctx context.Context, in *FindStatusByIdRequest, opts ...grpc.CallOption) (*ResultStatusResponse, error) {
	out := new(ResultStatusResponse)
	err := c.cc.Invoke(ctx, "/status.AuthorService/ServiceFindStatusById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility
type AuthorServiceServer interface {
	ServiceCreateStatus(context.Context, *CreateStatusRequest) (*ResultStatusResponse, error)
	ServiceFindStatusById(context.Context, *FindStatusByIdRequest) (*ResultStatusResponse, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorServiceServer struct {
}

func (UnimplementedAuthorServiceServer) ServiceCreateStatus(context.Context, *CreateStatusRequest) (*ResultStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCreateStatus not implemented")
}
func (UnimplementedAuthorServiceServer) ServiceFindStatusById(context.Context, *FindStatusByIdRequest) (*ResultStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceFindStatusById not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_ServiceCreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).ServiceCreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.AuthorService/ServiceCreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).ServiceCreateStatus(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_ServiceFindStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).ServiceFindStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.AuthorService/ServiceFindStatusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).ServiceFindStatusById(ctx, req.(*FindStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "status.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceCreateStatus",
			Handler:    _AuthorService_ServiceCreateStatus_Handler,
		},
		{
			MethodName: "ServiceFindStatusById",
			Handler:    _AuthorService_ServiceFindStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sales/proto/status.proto",
}
