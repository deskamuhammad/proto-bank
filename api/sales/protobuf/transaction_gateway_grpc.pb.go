// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/sales/proto/transaction_gateway.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionGatewayServiceClient is the client API for TransactionGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionGatewayServiceClient interface {
	GetAllTransaction(ctx context.Context, in *GetAllTransactionRequest, opts ...grpc.CallOption) (*GetAllTransactionResponse, error)
	GetTransactionDetail(ctx context.Context, in *GetTransactionDetailRequest, opts ...grpc.CallOption) (*GetTransactionDetailResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	CreateRequestInvoice(ctx context.Context, in *CreateRequestInvoiceRequest, opts ...grpc.CallOption) (*CreateRequestInvoiceResponse, error)
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*ApproveTransactionResponse, error)
	RejectTransaction(ctx context.Context, in *RejectTransactionRequest, opts ...grpc.CallOption) (*RejectTransactionResponse, error)
}

type transactionGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionGatewayServiceClient(cc grpc.ClientConnInterface) TransactionGatewayServiceClient {
	return &transactionGatewayServiceClient{cc}
}

func (c *transactionGatewayServiceClient) GetAllTransaction(ctx context.Context, in *GetAllTransactionRequest, opts ...grpc.CallOption) (*GetAllTransactionResponse, error) {
	out := new(GetAllTransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/GetAllTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) GetTransactionDetail(ctx context.Context, in *GetTransactionDetailRequest, opts ...grpc.CallOption) (*GetTransactionDetailResponse, error) {
	out := new(GetTransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/GetTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) CreateRequestInvoice(ctx context.Context, in *CreateRequestInvoiceRequest, opts ...grpc.CallOption) (*CreateRequestInvoiceResponse, error) {
	out := new(CreateRequestInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/CreateRequestInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*ApproveTransactionResponse, error) {
	out := new(ApproveTransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/ApproveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionGatewayServiceClient) RejectTransaction(ctx context.Context, in *RejectTransactionRequest, opts ...grpc.CallOption) (*RejectTransactionResponse, error) {
	out := new(RejectTransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionGatewayService/RejectTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionGatewayServiceServer is the server API for TransactionGatewayService service.
// All implementations must embed UnimplementedTransactionGatewayServiceServer
// for forward compatibility
type TransactionGatewayServiceServer interface {
	GetAllTransaction(context.Context, *GetAllTransactionRequest) (*GetAllTransactionResponse, error)
	GetTransactionDetail(context.Context, *GetTransactionDetailRequest) (*GetTransactionDetailResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	CreateRequestInvoice(context.Context, *CreateRequestInvoiceRequest) (*CreateRequestInvoiceResponse, error)
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	ApproveTransaction(context.Context, *ApproveTransactionRequest) (*ApproveTransactionResponse, error)
	RejectTransaction(context.Context, *RejectTransactionRequest) (*RejectTransactionResponse, error)
	mustEmbedUnimplementedTransactionGatewayServiceServer()
}

// UnimplementedTransactionGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionGatewayServiceServer struct {
}

func (UnimplementedTransactionGatewayServiceServer) GetAllTransaction(context.Context, *GetAllTransactionRequest) (*GetAllTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransaction not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) GetTransactionDetail(context.Context, *GetTransactionDetailRequest) (*GetTransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetail not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) CreateRequestInvoice(context.Context, *CreateRequestInvoiceRequest) (*CreateRequestInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestInvoice not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) ApproveTransaction(context.Context, *ApproveTransactionRequest) (*ApproveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransaction not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) RejectTransaction(context.Context, *RejectTransactionRequest) (*RejectTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTransaction not implemented")
}
func (UnimplementedTransactionGatewayServiceServer) mustEmbedUnimplementedTransactionGatewayServiceServer() {
}

// UnsafeTransactionGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionGatewayServiceServer will
// result in compilation errors.
type UnsafeTransactionGatewayServiceServer interface {
	mustEmbedUnimplementedTransactionGatewayServiceServer()
}

func RegisterTransactionGatewayServiceServer(s grpc.ServiceRegistrar, srv TransactionGatewayServiceServer) {
	s.RegisterService(&TransactionGatewayService_ServiceDesc, srv)
}

func _TransactionGatewayService_GetAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).GetAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/GetAllTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).GetAllTransaction(ctx, req.(*GetAllTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_GetTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).GetTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/GetTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).GetTransactionDetail(ctx, req.(*GetTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_CreateRequestInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).CreateRequestInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/CreateRequestInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).CreateRequestInvoice(ctx, req.(*CreateRequestInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_ApproveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).ApproveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/ApproveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).ApproveTransaction(ctx, req.(*ApproveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionGatewayService_RejectTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionGatewayServiceServer).RejectTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionGatewayService/RejectTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionGatewayServiceServer).RejectTransaction(ctx, req.(*RejectTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionGatewayService_ServiceDesc is the grpc.ServiceDesc for TransactionGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.TransactionGatewayService",
	HandlerType: (*TransactionGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTransaction",
			Handler:    _TransactionGatewayService_GetAllTransaction_Handler,
		},
		{
			MethodName: "GetTransactionDetail",
			Handler:    _TransactionGatewayService_GetTransactionDetail_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionGatewayService_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateRequestInvoice",
			Handler:    _TransactionGatewayService_CreateRequestInvoice_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _TransactionGatewayService_CreateInvoice_Handler,
		},
		{
			MethodName: "ApproveTransaction",
			Handler:    _TransactionGatewayService_ApproveTransaction_Handler,
		},
		{
			MethodName: "RejectTransaction",
			Handler:    _TransactionGatewayService_RejectTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sales/proto/transaction_gateway.proto",
}
