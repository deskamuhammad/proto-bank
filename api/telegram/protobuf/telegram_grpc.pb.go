// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/telegram/proto/telegram.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelegramServiceClient is the client API for TelegramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TelegramResponse, error)
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*TelegramResponse, error)
}

type telegramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramServiceClient(cc grpc.ClientConnInterface) TelegramServiceClient {
	return &telegramServiceClient{cc}
}

func (c *telegramServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*TelegramResponse, error) {
	out := new(TelegramResponse)
	err := c.cc.Invoke(ctx, "/telegram.TelegramService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramServiceClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*TelegramResponse, error) {
	out := new(TelegramResponse)
	err := c.cc.Invoke(ctx, "/telegram.TelegramService/GetUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramServiceServer is the server API for TelegramService service.
// All implementations must embed UnimplementedTelegramServiceServer
// for forward compatibility
type TelegramServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*TelegramResponse, error)
	GetUpdates(context.Context, *GetUpdatesRequest) (*TelegramResponse, error)
	mustEmbedUnimplementedTelegramServiceServer()
}

// UnimplementedTelegramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramServiceServer struct {
}

func (UnimplementedTelegramServiceServer) SendMessage(context.Context, *SendMessageRequest) (*TelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTelegramServiceServer) GetUpdates(context.Context, *GetUpdatesRequest) (*TelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedTelegramServiceServer) mustEmbedUnimplementedTelegramServiceServer() {}

// UnsafeTelegramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramServiceServer will
// result in compilation errors.
type UnsafeTelegramServiceServer interface {
	mustEmbedUnimplementedTelegramServiceServer()
}

func RegisterTelegramServiceServer(s grpc.ServiceRegistrar, srv TelegramServiceServer) {
	s.RegisterService(&TelegramService_ServiceDesc, srv)
}

func _TelegramService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.TelegramService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramService_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServiceServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.TelegramService/GetUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServiceServer).GetUpdates(ctx, req.(*GetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramService_ServiceDesc is the grpc.ServiceDesc for TelegramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telegram.TelegramService",
	HandlerType: (*TelegramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _TelegramService_SendMessage_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _TelegramService_GetUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/telegram/proto/telegram.proto",
}
